import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'providers/app_state_provider.dart';
import 'services/storage_service.dart';
import 'models/fishing_record.dart';
import 'models/marine_category.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Ïä§ÌÜ†Î¶¨ÏßÄ Ï¥àÍ∏∞Ìôî
  await StorageService.init();
  
  // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
  await StorageService.deleteAllRecords();
  
  // ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
  final now = DateTime.now();
  final today = DateTime(now.year, now.month, now.day);
  final yesterday = today.subtract(const Duration(days: 1));
  
  print('üìÖ ÌÖåÏä§Ìä∏ ÏãúÏûë: ${now.toString()}');
  print('Ïò§Îäò ÎÇ†Ïßú: ${today.toString()}');
  print('Ïñ¥Ï†ú ÎÇ†Ïßú: ${yesterday.toString()}\n');
  
  // Ïñ¥Ï†ú Í∏∞Î°ù Ï∂îÍ∞Ä
  await StorageService.addRecord(
    FishingRecord(
      category: MarineCategory.fish,
      species: 'Ïñ¥Ï†ú_Í≥†Îì±Ïñ¥',
      count: 5,
      latitude: 35.1796,
      longitude: 129.0756,
      timestamp: yesterday.add(const Duration(hours: 15)),
    ),
  );
  print('‚úÖ Ïñ¥Ï†ú Í∏∞Î°ù Ï∂îÍ∞Ä: Ïñ¥Ï†ú_Í≥†Îì±Ïñ¥ (${yesterday.add(const Duration(hours: 15))})');
  
  // Ïò§Îäò ÏÉàÎ≤Ω Í∏∞Î°ù
  await StorageService.addRecord(
    FishingRecord(
      category: MarineCategory.mollusk,
      species: 'Ïò§Îäò_ÏÉàÎ≤Ω_Ï†ÑÎ≥µ',
      count: 3,
      latitude: 35.1800,
      longitude: 129.0760,
      timestamp: today.add(const Duration(hours: 3)),
    ),
  );
  print('‚úÖ Ïò§Îäò ÏÉàÎ≤Ω Í∏∞Î°ù Ï∂îÍ∞Ä: Ïò§Îäò_ÏÉàÎ≤Ω_Ï†ÑÎ≥µ (${today.add(const Duration(hours: 3))})');
  
  // Ïò§Îäò Ïò§ÌõÑ Í∏∞Î°ù
  await StorageService.addRecord(
    FishingRecord(
      category: MarineCategory.cephalopod,
      species: 'Ïò§Îäò_Ïò§ÌõÑ_Ïò§ÏßïÏñ¥',
      count: 10,
      latitude: 35.1810,
      longitude: 129.0770,
      timestamp: today.add(const Duration(hours: 14)),
    ),
  );
  print('‚úÖ Ïò§Îäò Ïò§ÌõÑ Í∏∞Î°ù Ï∂îÍ∞Ä: Ïò§Îäò_Ïò§ÌõÑ_Ïò§ÏßïÏñ¥ (${today.add(const Duration(hours: 14))})');
  
  // Ïò§Îäò Ï†ÄÎÖÅ Í∏∞Î°ù
  await StorageService.addRecord(
    FishingRecord(
      category: MarineCategory.crustacean,
      species: 'Ïò§Îäò_Ï†ÄÎÖÅ_ÍΩÉÍ≤å',
      count: 7,
      latitude: 35.1820,
      longitude: 129.0780,
      timestamp: today.add(const Duration(hours: 20)),
    ),
  );
  print('‚úÖ Ïò§Îäò Ï†ÄÎÖÅ Í∏∞Î°ù Ï∂îÍ∞Ä: Ïò§Îäò_Ï†ÄÎÖÅ_ÍΩÉÍ≤å (${today.add(const Duration(hours: 20))})\n');
  
  runApp(TestApp());
}

class TestApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (_) => AppStateProvider()..loadRecords(),
      child: MaterialApp(
        title: 'Ïò§Îäò Í∏∞Î°ù ÌÖåÏä§Ìä∏',
        home: TestScreen(),
      ),
    );
  }
}

class TestScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Ïò§Îäò Í∏∞Î°ù Î∞è UI Ïó¨Î∞± ÌÖåÏä§Ìä∏'),
      ),
      body: Consumer<AppStateProvider>(
        builder: (context, provider, child) {
          final now = DateTime.now();
          final today = DateTime(now.year, now.month, now.day);
          
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('üìä Í∏∞Î°ù ÌÜµÍ≥Ñ', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                        SizedBox(height: 10),
                        Text('Ïò§Îäò Í∏∞Î°ù: ${provider.todayRecordCount}Í∞ú', style: TextStyle(fontSize: 16, color: provider.todayRecordCount > 0 ? Colors.green : Colors.grey)),
                        Text('Ï†ÑÏ≤¥ Í∏∞Î°ù: ${provider.totalRecords}Í∞ú', style: TextStyle(fontSize: 16)),
                      ],
                    ),
                  ),
                ),
                SizedBox(height: 20),
                
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('üìù Ï†ÑÏ≤¥ Í∏∞Î°ù Î™©Î°ù', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                        SizedBox(height: 10),
                        FutureBuilder<List<FishingRecord>>(
                          future: StorageService.getRecords(),
                          builder: (context, snapshot) {
                            if (!snapshot.hasData) return CircularProgressIndicator();
                            
                            final records = snapshot.data!;
                            return Column(
                              children: records.map((record) {
                                final isToday = record.timestamp.year == today.year &&
                                               record.timestamp.month == today.month &&
                                               record.timestamp.day == today.day;
                                               
                                return Container(
                                  margin: EdgeInsets.symmetric(vertical: 4),
                                  padding: EdgeInsets.all(8),
                                  decoration: BoxDecoration(
                                    color: isToday ? Colors.green.withOpacity(0.1) : Colors.grey.withOpacity(0.1),
                                    borderRadius: BorderRadius.circular(8),
                                    border: Border.all(
                                      color: isToday ? Colors.green : Colors.grey,
                                      width: isToday ? 2 : 1,
                                    ),
                                  ),
                                  child: Row(
                                    children: [
                                      Icon(
                                        isToday ? Icons.today : Icons.calendar_today,
                                        color: isToday ? Colors.green : Colors.grey,
                                      ),
                                      SizedBox(width: 10),
                                      Expanded(
                                        child: Column(
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: [
                                            Text(
                                              '${record.category.korean} - ${record.species} (${record.count}ÎßàÎ¶¨)',
                                              style: TextStyle(fontWeight: FontWeight.bold),
                                            ),
                                            Text(
                                              '${record.timestamp.toString().substring(0, 19)}',
                                              style: TextStyle(fontSize: 12, color: Colors.grey),
                                            ),
                                            if (isToday)
                                              Text(
                                                '‚úÖ Ïò§Îäò Í∏∞Î°ù',
                                                style: TextStyle(fontSize: 12, color: Colors.green, fontWeight: FontWeight.bold),
                                              ),
                                          ],
                                        ),
                                      ),
                                    ],
                                  ),
                                );
                              }).toList(),
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                ),
                
                SizedBox(height: 20),
                
                // UI Ïó¨Î∞± ÌÖåÏä§Ìä∏Ïö© Ïπ¥ÎìúÎì§
                Text('üìê UI Ïó¨Î∞± ÏùºÏπò ÌÖåÏä§Ìä∏', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                SizedBox(height: 10),
                
                // GPS ÏÉÅÌÉú Ïπ¥Îìú Ïä§ÌÉÄÏùº
                Card(
                  elevation: 2,
                  margin: EdgeInsets.zero,
                  child: Container(
                    padding: EdgeInsets.all(16),
                    child: Text('GPS ÏÉÅÌÉú Ïπ¥Îìú (Í∏∞Ï§Ä)'),
                  ),
                ),
                
                SizedBox(height: 10),
                
                // ÌÜµÍ≥Ñ Ïπ¥Îìú Ïä§ÌÉÄÏùº (Row)
                Row(
                  children: [
                    Expanded(
                      child: Container(
                        padding: EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: Colors.green.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Colors.green.withOpacity(0.3)),
                        ),
                        child: Text('Ïò§Îäò Í∏∞Î°ù'),
                      ),
                    ),
                    SizedBox(width: 10),
                    Expanded(
                      child: Container(
                        padding: EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: Colors.blue.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Colors.blue.withOpacity(0.3)),
                        ),
                        child: Text('Ï†ÑÏ≤¥ Í∏∞Î°ù'),
                      ),
                    ),
                  ],
                ),
                
                SizedBox(height: 10),
                
                // InfoCard Ïä§ÌÉÄÏùº (ÏûêÏõêÎ≥Ñ ÌÜµÍ≥Ñ)
                Card(
                  elevation: 2,
                  margin: EdgeInsets.zero, // InfoCardÏôÄ ÎèôÏùº
                  child: Container(
                    padding: EdgeInsets.all(16), // paddingMÍ≥º ÎèôÏùº
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('ÏûêÏõêÎ≥Ñ ÌÜµÍ≥Ñ (InfoCard)', style: TextStyle(fontWeight: FontWeight.bold)),
                        SizedBox(height: 8),
                        Text('Ï¢åÏö∞ Ïó¨Î∞±Ïù¥ ÏúÑ Ïπ¥ÎìúÎì§Í≥º ÏùºÏπòÌï¥Ïïº Ìï®'),
                      ],
                    ),
                  ),
                ),
                
                SizedBox(height: 20),
                
                // Ïó¨Î∞± Ï∏°Ï†ï Í≤∞Í≥º
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('‚úÖ Ï≤¥ÌÅ¨ ÏÇ¨Ìï≠:', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                        SizedBox(height: 10),
                        Text('1. Ïò§Îäò Í∏∞Î°ùÏù¥ 0Í∞úÍ∞Ä ÏïÑÎãå 3Í∞úÎ°ú ÌëúÏãúÎêòÎäîÏßÄ'),
                        Text('2. ÎÖπÏÉâ ÌÖåÎëêÎ¶¨Î°ú ÌëúÏãúÎêú Í∏∞Î°ùÏù¥ 3Í∞úÏù∏ÏßÄ'),
                        Text('3. GPS Ïπ¥ÎìúÏôÄ ÏûêÏõêÎ≥Ñ ÌÜµÍ≥Ñ Ïπ¥ÎìúÏùò Ï¢åÏö∞ Ïó¨Î∞±Ïù¥ ÏùºÏπòÌïòÎäîÏßÄ'),
                        Text('4. Î™®Îì† Ïπ¥ÎìúÏùò ÏôºÏ™Ω Ï†ïÎ†¨Ïù¥ ÎèôÏùºÌïúÏßÄ'),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}